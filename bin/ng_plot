#!/usr/bin/env python3
# ng_plot.py
"""Script for generating images from ng_trajectory files.
"""
######################
# Imports & Globals
######################

import sys, os, argparse

import ng_trajectory.interpolators.cubic_spline as cspline
import ng_trajectory.plot as ngplot
import matplotlib.pyplot

import numpy, json

# GIFs
import io#, imageio
from PIL import Image

# Progress
import tqdm


# Global variables
VALID_POINTS = None


######################
# Argparse
######################

PARSER = argparse.ArgumentParser(
    prog = "ng_plot",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description = """
Script for generating images from ng_trajectory files.

Output is generated according to the number of passed files.
 - 1 file generates 'outfile'.png
 - >1 files generate 'outfile'.gif
    """,
)

# Arguments
PARSER.add_argument("map_file",
    nargs = 1,
    help = "Path to the valid_points file.",
    type = str,
    #required = True,
)

PARSER.add_argument("input_file",
    nargs = "+",
    help = "Path to the ng_trajectory file.",
    type = argparse.FileType("r"),
)

PARSER.add_argument("-O",
    dest = "outfile",
    help = "Set the output filename.",
    type = str,
    required = True,
)

PARSER.add_argument("-v",
    dest = "verbose",
    help = "Give more output.",
    action = "store_true",
)

PARSER.add_argument("-d",
    dest = "duration",
    help = "Duration of the GIF sequence.",
    default = 200,
    type = int,
)


######################
# Figure generation
######################

def figureGenerate(solution, args):
    """Generates a figure according to the settings.

    Arguments:
    solution -- waypoints of the solution to be interpolated, numpy.ndarray
    args -- arguments received from the user

    Returns:
    img -- image saved to the virtual file, io.BytesIO
    """
    global VALID_POINTS

    f = ngplot.figureCreate()

    ngplot.trackPlot(VALID_POINTS)
    ngplot.axisEqual()

    line = numpy.asarray(solution)
    iline = cspline.interpolate(line)
    ngplot.pointsPlot(iline)

    # https://www.tutorialspoint.com/how-to-convert-matplotlib-figure-to-pil-image-object
    img_buf = io.BytesIO()
    #matplotlib.pyplot.savefig(img_buf, format='png')
    ngplot.figureSave(img_buf)

    ngplot.figureClose()

    return img_buf


######################
# Main
######################

if __name__ == "__main__":

    # Obtain arguments
    args = PARSER.parse_args()

    if args.verbose:
        print ("Received arguments:")
        print ("\n".join([ "\t%s: %s" % (key, value) for key, value in args._get_kwargs() ]))


    # Obtain map from the file
    VALID_POINTS = numpy.load(args.map_file[0])


    # Obtain solutions from logs
    solutions = []

    for log in tqdm.tqdm(args.input_file, desc = "Loading", leave = False):
        for line in log:
            if line.startswith("solution:"):
                solutions.append(
                    json.loads(line[9:].rstrip())
                )

    if args.verbose:
        print ("Found solutions: %d" % len(solutions))


    # Plot the data
    images = []

    for solution in tqdm.tqdm(solutions, desc = "Plotting", leave = True):
        images.append(
            figureGenerate(solution, args)
        )

    # Load images to Pillow
    # https://stackoverflow.com/questions/753190/programmatically-generate-video-or-animated-gif-in-python
    imgs = [ Image.open(i) for i in images ]
    img = imgs[0]

    if len(imgs) > 1:
        img.save(args.outfile + ".gif", format = "GIF", append_images = imgs[1:], save_all = True, duration = args.duration, loop = 0)
    elif len(imgs) == 1:
        img.save(args.outfile + ".png", format = "PNG")
